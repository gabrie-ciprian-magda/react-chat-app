{"version":3,"sources":["components/Chat.js","App.js","reportWebVitals.js","index.js"],"names":["Chat","socket","user","room","useState","currentMsg","setCurrentMsg","msgList","setMsgList","sendMsg","e","a","preventDefault","messageData","author","msg","time","Date","now","getHours","getMinutes","emit","list","useEffect","on","data","className","map","messageContent","i","id","type","placeholder","onChange","target","value","onClick","io","connect","App","userName","setUserName","chatRoom","setChatRoom","showChatWindow","setShowChatWindow","onSubmit","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4PAoEeA,MAjEf,YAAqC,IAAtBC,EAAqB,EAArBA,OAAQC,EAAa,EAAbA,KAAMC,EAAO,EAAPA,KAAO,EAEIC,mBAAS,IAFb,mBAEzBC,EAFyB,KAEbC,EAFa,OAGFF,mBAAS,IAHP,mBAGzBG,EAHyB,KAGhBC,EAHgB,KAS1BC,EAAO,uCAAG,WAAOC,GAAP,eAAAC,EAAA,yDACZD,EAAEE,iBACoB,qBACJ,KAAfP,EAHS,uBAIFQ,EAAc,CAChBV,KAAMA,EACNW,OAAQZ,EACRa,IAAKV,EACLW,KAAM,IAAIC,KAAKA,KAAKC,OAAOC,WAAa,IAAM,IAAIF,KAAKA,KAAKC,OAAOE,cAR/D,SAWFnB,EAAOoB,KAAK,WAAYR,GAXtB,OAYRP,EAAc,IACdE,GAAW,SAACc,GAAD,4BAAcA,GAAd,CAAoBT,OAbvB,2CAAH,sDAuBb,OANAU,qBAAU,WACNtB,EAAOuB,GAAG,eAAe,SAACC,GACtBjB,GAAW,SAACc,GAAD,4BAAcA,GAAd,CAAoBG,YAEpC,CAACxB,IAGA,sBAAKyB,UAAU,cAAf,UACI,qBAAKA,UAAU,cAAf,SAA6B,iDAAkBvB,OAC/C,qBAAKuB,UAAU,YAAf,SACI,cAAC,IAAD,CAAgBA,UAAU,oBAA1B,SACCnB,EAAQoB,KAAI,SAACC,EAAgBC,GAC1B,OACI,qBAAKH,UAAU,UAAkBI,GAAI5B,IAAS0B,EAAed,OAAS,MAAQ,QAA9E,SACI,gCACI,qBAAKY,UAAU,kBAAf,SACI,4BAAIE,EAAeb,QAEvB,sBAAKW,UAAU,eAAf,UACI,sBAAMA,UAAU,mBAChB,mBAAGI,GAAG,OAAN,SAAcF,EAAeZ,OAC7B,mBAAGc,GAAG,SAAN,SAAgBF,EAAed,gBARbe,UAgBtC,+BACI,sBAAKH,UAAU,cAAf,UACI,uBAAOK,KAAK,OAAOC,YAAY,UAAUC,SApD1C,SAACvB,GAChBJ,EAAcI,EAAEwB,OAAOC,QAmDwDA,MAAO9B,IACtE,wBAAQ0B,KAAK,SAASK,QAAS3B,EAA/B,6BCvDlBR,EAASoC,IAAGC,QAAQ,yBA0CXC,MAxCf,WAAgB,IAAD,EAEmBnC,mBAAS,IAF5B,mBAENoC,EAFM,KAEIC,EAFJ,OAGmBrC,mBAAS,IAH5B,mBAGNsC,EAHM,KAGIC,EAHJ,OAI+BvC,oBAAS,GAJxC,mBAINwC,EAJM,KAIUC,EAJV,KAsBb,OACE,qBAAKnB,UAAU,MAAf,SACE,sBAAMoB,SAlBO,SAACpC,GAChBA,EAAEE,iBACc,KAAb4B,GAAgC,KAAbE,IACpBzC,EAAOoB,KAAK,YAAaqB,GACzBG,GAAkB,KAclB,SACID,EAQC,cAAC,EAAD,CAAM3C,OAAQA,EAAQC,KAAMsC,EAAUrC,KAAMuC,IAP5C,sBAAKhB,UAAU,oBAAf,UACC,6CACA,uBAAOK,KAAK,OAAOC,YAAY,WAAWC,SAd3B,SAACvB,GACxB+B,EAAY/B,EAAEwB,OAAOC,UAcb,uBAAOJ,KAAK,OAAOC,YAAY,gBAAgBC,SAXhC,SAACvB,GACxBiC,EAAYjC,EAAEwB,OAAOC,UAWb,wBAAQJ,KAAK,SAAb,mCC1BGgB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.efaaabae.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport ScrollToBottom from 'react-scroll-to-bottom';\r\n\r\nfunction Chat({socket, user, room}) {\r\n\r\n    const [currentMsg, setCurrentMsg] = useState('');\r\n    const [msgList, setMsgList] = useState([]);\r\n\r\n    const setChatMsg = (e) => {\r\n        setCurrentMsg(e.target.value);\r\n    }\r\n\r\n    const sendMsg = async (e) => {\r\n        e.preventDefault();\r\n        const validateInput = /^[0-9a-zA-Z-=.,]+$/;\r\n        if(currentMsg !== '' && validateInput) {\r\n            const messageData = {\r\n                room: room,\r\n                author: user,\r\n                msg: currentMsg,\r\n                time: new Date(Date.now()).getHours() + ':' + new Date(Date.now()).getMinutes()\r\n            }\r\n\r\n            await socket.emit('send_msg', messageData);\r\n            setCurrentMsg('');\r\n            setMsgList((list) => [...list, messageData]);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        socket.on('receive_msg', (data) => {\r\n            setMsgList((list) => [...list, data]);\r\n        })\r\n    }, [socket]);\r\n\r\n    return (\r\n        <div className=\"chat-window\">\r\n            <div className=\"chat-header\"><p>{`Chat Room: ${room}`}</p></div>\r\n            <div className=\"chat-body\">\r\n                <ScrollToBottom className=\"message-container\">\r\n                {msgList.map((messageContent, i) => {\r\n                    return (\r\n                        <div className=\"message\" key={i} id={user === messageContent.author ? 'you' : 'other'}>\r\n                            <div>\r\n                                <div className=\"message-content\">\r\n                                    <p>{messageContent.msg}</p>\r\n                                </div>\r\n                                <div className=\"message-meta\">\r\n                                    <span className=\"message-status\"></span>\r\n                                    <p id=\"time\">{messageContent.time}</p>\r\n                                    <p id=\"author\">{messageContent.author}</p>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                })}\r\n                </ScrollToBottom>\r\n            </div>\r\n                <form>\r\n                    <div className=\"chat-footer\">\r\n                        <input type=\"text\" placeholder=\"Message\" onChange={setChatMsg} value={currentMsg} />\r\n                        <button type=\"submit\" onClick={sendMsg}>&#9658;</button>\r\n                    </div>\r\n                </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chat;\r\n","import React, {useState} from 'react';\nimport './App.css';\nimport io from 'socket.io-client';\n\nimport Chat from './components/Chat';\n\nconst socket = io.connect('http://localhost:3001');\n\nfunction App() {\n\n  const [userName, setUserName] = useState('');\n  const [chatRoom, setChatRoom] = useState('');\n  const [showChatWindow, setShowChatWindow] = useState(false);\n\n  const joinRoom = (e) => {\n    e.preventDefault();\n    if(userName !== '' && chatRoom !== '') {\n      socket.emit('join_room', chatRoom);\n      setShowChatWindow(true);\n    }\n  }\n\n  const setUserNameInput = (e) => {\n    setUserName(e.target.value);\n  }\n\n  const setChatRoomInput = (e) => {\n    setChatRoom(e.target.value);\n  }\n\n  return (\n    <div className=\"App\">\n      <form onSubmit={joinRoom}>\n        {!showChatWindow ?\n          (<div className=\"joinChatContainer\">\n            <h3>Join a chat</h3>\n            <input type=\"text\" placeholder=\"Username\" onChange={setUserNameInput} />\n            <input type=\"text\" placeholder=\"Chatroom Name\" onChange={setChatRoomInput} />\n            <button type=\"submit\">Join chatroom</button>\n          </div>)\n        :\n          (<Chat socket={socket} user={userName} room={chatRoom} />)\n        }\n      </form>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}